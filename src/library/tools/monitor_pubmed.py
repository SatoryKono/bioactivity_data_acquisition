#!/usr/bin/env python3
"""–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ PubMed E-utilities API –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–≥–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PubMed E-utilities API
–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç–∞–º.
"""

import json
import os
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional

import requests


class PubMedMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –¥–ª—è PubMed E-utilities API."""
    
    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.environ.get('PUBMED_API_KEY')
        self.base_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils"
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.headers = {
            'Accept': 'application/json',
            'User-Agent': 'bioactivity-data-acquisition/0.1.0'
        }
    
    def test_api_call(self) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ PubMed E-utilities."""
        
        # –¢–µ—Å—Ç–æ–≤—ã–π PMID
        test_pmid = "7154002"
        
        params = {
            'db': 'pubmed',
            'id': test_pmid,
            'retmode': 'json'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.api_key:
            params['api_key'] = self.api_key
        
        try:
            response = self.session.get(
                f"{self.base_url}/esummary.fcgi",
                params=params,
                headers=self.headers,
                timeout=30
            )
            
            result = {
                'timestamp': datetime.now().isoformat(),
                'status_code': response.status_code,
                'success': response.status_code == 200,
                'response_time_ms': response.elapsed.total_seconds() * 1000,
                'api_key_used': bool(self.api_key),
            }
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    result['data_received'] = {
                        'has_result': 'result' in data,
                        'pmid_found': test_pmid in str(data),
                    }
                except:
                    result['data_received'] = {'json_parse_error': True}
            else:
                result['error'] = response.text
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É rate limiting
                if response.status_code == 429:
                    try:
                        error_data = response.json()
                        result['rate_limit_info'] = {
                            'limit': error_data.get('limit'),
                            'count': error_data.get('count'),
                            'api_key': error_data.get('api-key'),
                        }
                    except:
                        pass
            
            return result
            
        except requests.exceptions.RequestException as e:
            return {
                'timestamp': datetime.now().isoformat(),
                'success': False,
                'error': str(e),
                'error_type': type(e).__name__,
                'api_key_used': bool(self.api_key),
            }
    
    def check_rate_limits(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã API."""
        
        result = self.test_api_call()
        
        if not result['success']:
            return result
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        analysis = {
            'api_key_configured': bool(self.api_key),
            'current_status': 'healthy' if result['success'] else 'error',
            'response_time_ms': result.get('response_time_ms', 0),
        }
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ rate limiting
        if 'rate_limit_info' in result:
            rate_info = result['rate_limit_info']
            if 'limit' in rate_info and 'count' in rate_info:
                limit = int(rate_info['limit'])
                count = int(rate_info['count'])
                usage_percent = (count / limit) * 100
                
                analysis.update({
                    'rate_limit_total': limit,
                    'rate_limit_current': count,
                    'usage_percent': round(usage_percent, 1),
                    'status': 'critical' if usage_percent > 90 else 'warning' if usage_percent > 70 else 'good'
                })
        
        return analysis
    
    def test_rate_limits_aggressively(self) -> Dict[str, Any]:
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–∏–º–∏—Ç—ã API."""
        
        print("üß™ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ PubMed API...")
        
        test_pmid = "7154002"
        results = []
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in range(5):
            params = {
                'db': 'pubmed',
                'id': test_pmid,
                'retmode': 'json'
            }
            
            if self.api_key:
                params['api_key'] = self.api_key
            
            try:
                start_time = time.time()
                response = self.session.get(
                    f"{self.base_url}/esummary.fcgi",
                    params=params,
                    headers=self.headers,
                    timeout=10
                )
                response_time = (time.time() - start_time) * 1000
                
                result = {
                    'request_number': i + 1,
                    'status_code': response.status_code,
                    'response_time_ms': response_time,
                    'success': response.status_code == 200,
                }
                
                if response.status_code == 429:
                    try:
                        error_data = response.json()
                        result['rate_limit_info'] = error_data
                    except:
                        pass
                
                results.append(result)
                
                print(f"  –ó–∞–ø—Ä–æ—Å {i+1}: {'‚úÖ OK' if result['success'] else '‚ùå FAIL'} "
                      f"({result['response_time_ms']:.0f}ms)")
                
                if response.status_code == 429:
                    print(f"    üö´ Rate limited: {response.text}")
                    break
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.1)
                
            except Exception as e:
                print(f"  –ó–∞–ø—Ä–æ—Å {i+1}: ‚ùå ERROR - {e}")
                results.append({
                    'request_number': i + 1,
                    'success': False,
                    'error': str(e)
                })
                break
        
        return {
            'test_results': results,
            'total_requests': len(results),
            'successful_requests': sum(1 for r in results if r.get('success', False)),
            'rate_limited': any(r.get('status_code') == 429 for r in results),
        }
    
    def monitor_continuous(self, interval_seconds: int = 60, duration_minutes: int = 10):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API."""
        
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ PubMed E-utilities API")
        print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_seconds} —Å–µ–∫—É–Ω–¥")
        print(f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω—É—Ç")
        print(f"üîë API –∫–ª—é—á: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if self.api_key else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        print("=" * 60)
        
        start_time = time.time()
        end_time = start_time + (duration_minutes * 60)
        results = []
        
        try:
            while time.time() < end_time:
                timestamp = datetime.now().strftime("%H:%M:%S")
                print(f"[{timestamp}] –ü—Ä–æ–≤–µ—Ä—è–µ–º API...", end=" ")
                
                result = self.check_rate_limits()
                results.append(result)
                
                if result['current_status'] == 'healthy':
                    print("‚úÖ OK", end="")
                    
                    if 'response_time_ms' in result:
                        print(f" ({result['response_time_ms']:.0f}ms)", end="")
                    
                    if 'usage_percent' in result:
                        status_emoji = {
                            'good': 'üü¢',
                            'warning': 'üü°', 
                            'critical': 'üî¥'
                        }
                        print(f" {status_emoji.get(result['status'], '‚ö™')} {result['usage_percent']}%", end="")
                else:
                    print("‚ùå ERROR")
                    if 'error' in result:
                        print(f"   –û—à–∏–±–∫–∞: {result['error']}")
                
                print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                time.sleep(interval_seconds)
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._save_results(results)
        self._print_summary(results)
    
    def _save_results(self, results: list):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ñ–∞–π–ª."""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ 3 —É—Ä–æ–≤–Ω—è –≤—ã—à–µ)
        project_root = Path(__file__).parent.parent.parent.parent
        reports_dir = project_root / "reports"
        reports_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = reports_dir / f"monitor_pubmed_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    
    def _print_summary(self, results: list):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        
        if not results:
            return
        
        total_checks = len(results)
        successful_checks = sum(1 for r in results if r.get('current_status') == 'healthy')
        success_rate = (successful_checks / total_checks) * 100
        
        print("\n" + "=" * 60)
        print("üìà –°–í–û–î–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("=" * 60)
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_checks}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        response_times = [r.get('response_time_ms', 0) for r in results if 'response_time_ms' in r]
        if response_times:
            avg_response_time = sum(response_times) / len(response_times)
            print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.0f}ms")
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        usage_percents = [r.get('usage_percent', 0) for r in results if 'usage_percent' in r]
        if usage_percents:
            max_usage = max(usage_percents)
            avg_usage = sum(usage_percents) / len(usage_percents)
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {max_usage:.1f}%")
            print(f"–°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {avg_usage:.1f}%")
        
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if success_rate < 95:
            print("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        
        if response_times and avg_response_time > 5000:
            print("‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã API - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        
        if usage_percents and max_usage > 80:
            print("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞")
        
        if not self.api_key:
            print("üí° –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤:")
            print("   https://www.ncbi.nlm.nih.gov/account/")
            print("   –õ–∏–º–∏—Ç—ã: 3 –∑–∞–ø—Ä–æ—Å–∞/—Å–µ–∫ –±–µ–∑ –∫–ª—é—á–∞, 10 –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫ —Å –∫–ª—é—á–æ–º")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ PubMed E-utilities API")
    parser.add_argument("--single", action="store_true", help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É")
    parser.add_argument("--test-limits", action="store_true", help="–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã")
    parser.add_argument("--interval", type=int, default=60, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)")
    parser.add_argument("--duration", type=int, default=10, help="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–º–∏–Ω—É—Ç—ã)")
    
    args = parser.parse_args()
    
    monitor = PubMedMonitor()
    
    if args.test_limits:
        print("üß™ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤...")
        result = monitor.test_rate_limits_aggressively()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {result['total_requests']}")
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {result['successful_requests']}")
        print(f"Rate limited: {'–î–∞' if result['rate_limited'] else '–ù–µ—Ç'}")
        
        if not monitor.api_key and result['rate_limited']:
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤")
        
    elif args.single:
        print("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–Ω—É –ø—Ä–æ–≤–µ—Ä–∫—É API...")
        result = monitor.check_rate_limits()
        
        print(f"–°—Ç–∞—Ç—É—Å: {'‚úÖ OK' if result['current_status'] == 'healthy' else '‚ùå ERROR'}")
        
        if 'response_time_ms' in result:
            print(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['response_time_ms']:.0f}ms")
        
        if 'usage_percent' in result:
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤: {result['usage_percent']:.1f}%")
        
        if 'error' in result:
            print(f"–û—à–∏–±–∫–∞: {result['error']}")
    else:
        monitor.monitor_continuous(args.interval, args.duration)


if __name__ == "__main__":
    main()
