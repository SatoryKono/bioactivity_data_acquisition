#!/usr/bin/env python3
"""CLI –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ –≤ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö pipeline'–æ–≤."""

from pathlib import Path

import typer

from bioetl.utils.column_validator import ColumnValidator

app = typer.Typer(help="–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö pipeline'–æ–≤")


@app.command()
def validate(
    pipeline_name: str = typer.Argument(..., help="–ò–º—è pipeline (assay, activity, testitem, target, document)"),
    output_dir: Path = typer.Option(
        Path("data/output"),
        "--output-dir",
        "-o",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
    ),
    schema_version: str = typer.Option(
        "latest",
        "--schema-version",
        help="–í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
    ),
    report_dir: Path = typer.Option(
        Path("data/output/validation_reports"),
        "--report-dir",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤",
    ),
    verbose: bool = typer.Option(
        False,
        "--verbose",
        "-v",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥",
    ),
) -> None:
    """–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö pipeline."""

    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    report_dir.mkdir(parents=True, exist_ok=True)

    # –°–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    validator = ColumnValidator()

    # –ù–∞–π—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ pipeline
    pipeline_output_dir = output_dir / pipeline_name

    if not pipeline_output_dir.exists():
        typer.echo(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {pipeline_output_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        raise typer.Exit(1)

    typer.echo(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è pipeline: {pipeline_name}")
    typer.echo(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {pipeline_output_dir}")
    typer.echo(f"üìã –í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: {schema_version}")
    typer.echo()

    # –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    results = validator.validate_pipeline_output(
        pipeline_name=pipeline_name,
        output_dir=pipeline_output_dir,
        schema_version=schema_version,
    )

    if not results:
        typer.echo("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ CSV —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    typer.echo("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    typer.echo()

    for result in results:
        status = "‚úÖ" if result.overall_match else "‚ùå"
        typer.echo(f"{status} {result.entity}: {len(result.actual_columns)} –∫–æ–ª–æ–Ω–æ–∫ ({len(result.empty_columns)} –ø—É—Å—Ç—ã—Ö)")

        if result.missing_columns:
            typer.echo(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(result.missing_columns)}")

        if result.extra_columns:
            typer.echo(f"   –õ–∏—à–Ω–∏–µ: {', '.join(result.extra_columns)}")

        if result.empty_columns:
            typer.echo(f"   –ü—É—Å—Ç—ã–µ: {', '.join(result.empty_columns)}")

        if not result.order_matches:
            typer.echo("   –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")

    typer.echo()

    # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
    report_path = validator.generate_report(results, report_dir)

    typer.echo(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

    # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_entities = len(results)
    matching_entities = sum(1 for r in results if r.overall_match)
    success_rate = matching_entities / total_entities if total_entities > 0 else 0

    typer.echo()
    typer.echo("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    typer.echo(f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: {matching_entities}/{total_entities} ({success_rate:.1%})")

    if success_rate < 1.0:
        typer.echo("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        raise typer.Exit(1)
    else:
        typer.echo("‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")


@app.command()
def compare_all(
    output_dir: Path = typer.Option(
        Path("data/output"),
        "--output-dir",
        "-o",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
    ),
    schema_version: str = typer.Option(
        "latest",
        "--schema-version",
        help="–í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
    ),
    report_dir: Path = typer.Option(
        Path("data/output/validation_reports"),
        "--report-dir",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤",
    ),
) -> None:
    """–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö pipeline'–æ–≤."""

    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    report_dir.mkdir(parents=True, exist_ok=True)

    # –°–æ–∑–¥–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    validator = ColumnValidator()

    # –°–ø–∏—Å–æ–∫ pipeline'–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    pipelines = ["assay", "activity", "testitem", "target", "document"]

    all_results = []

    typer.echo("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö pipeline'–æ–≤")
    typer.echo(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
    typer.echo(f"üìã –í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã: {schema_version}")
    typer.echo()

    for pipeline_name in pipelines:
        pipeline_output_dir = output_dir / pipeline_name

        if not pipeline_output_dir.exists():
            typer.echo(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ {pipeline_name}: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            continue

        typer.echo(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {pipeline_name}...")

        results = validator.validate_pipeline_output(
            pipeline_name=pipeline_name,
            output_dir=pipeline_output_dir,
            schema_version=schema_version,
        )

        all_results.extend(results)

    if not all_results:
        typer.echo("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        return

    # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π –æ—Ç—á–µ—Ç
    report_path = validator.generate_report(all_results, report_dir)

    typer.echo()
    typer.echo(f"üìÑ –û–±—â–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

    # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_entities = len(all_results)
    matching_entities = sum(1 for r in all_results if r.overall_match)
    success_rate = matching_entities / total_entities if total_entities > 0 else 0

    typer.echo()
    typer.echo("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    typer.echo(f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: {matching_entities}/{total_entities} ({success_rate:.1%})")

    if success_rate < 1.0:
        typer.echo("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        raise typer.Exit(1)
    else:
        typer.echo("‚úÖ –í—Å–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")


if __name__ == "__main__":
    app()
