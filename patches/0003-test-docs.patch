diff --git a/DE-DUP_PLAN.md b/DE-DUP_PLAN.md
index 5764ca2..a522506 100644
--- a/DE-DUP_PLAN.md
+++ b/DE-DUP_PLAN.md
@@ -14,6 +14,6 @@ The legacy `library.target` package has been fully removed. The modern `bioetl`
 - Monitor downstream documentation or deployment scripts for any references to the removed modules and update them to point to the `bioetl` equivalents if discovered.
 
 ## Shared ChEMBL Client Contract
-- Pipelines that communicate with the ChEMBL API must call `bioetl.pipelines.base.create_chembl_client` during construction.
-- The helper applies the canonical defaults (base URL, batch sizing, URL-length guards) via `ensure_target_source_config` and materialises a `UnifiedAPIClient` using `APIClientFactory.from_pipeline_config`.
-- Callers must persist the returned client alongside the resolved batch and limit metadata to honour the shared runtime contract and keep tests focused on the helper when monkeypatching.
+- Pipelines that communicate with the ChEMBL API must call `PipelineBase._init_chembl_client()` during construction (legacy call sites may continue using `bioetl.pipelines.base.create_chembl_client`).
+- The helper applies the canonical defaults (base URL, batch sizing, URL-length guards) via `ensure_target_source_config` and materialises a `UnifiedAPIClient` using `APIClientFactory.from_pipeline_config` before returning the resolved context.
+- Callers must persist the returned client alongside the resolved batch and limit metadata to honour the shared runtime contract, and tests should monkeypatch `_init_chembl_client` to intercept client creation in a single location.
diff --git a/tests/unit/core/test_client_factory.py b/tests/unit/core/test_client_factory.py
index 53aecb5..20e9bec 100644
--- a/tests/unit/core/test_client_factory.py
+++ b/tests/unit/core/test_client_factory.py
@@ -141,10 +141,14 @@ def test_pipeline_constructors_use_factory(
         def request_json(self, url, params=None, method="GET", **kwargs):
             return {"chembl_db_version": "CHEMBL_TEST"}
 
-    original_helper = base_module.create_chembl_client
+    original_builder = base_module._build_chembl_client_context
 
-    def recording_helper(pipeline_config, *, defaults=None, batch_size_cap=None):  # type: ignore[override]
-        context = original_helper(pipeline_config, defaults=defaults, batch_size_cap=batch_size_cap)
+    def recording_helper(self, *, defaults=None, batch_size_cap=None):  # type: ignore[override]
+        context = original_builder(
+            self.config,
+            defaults=defaults,
+            batch_size_cap=batch_size_cap,
+        )
         return base_module.ChemblClientContext(
             client=DummyClient(context.client.config),
             source_config=context.source_config,
@@ -153,7 +157,7 @@ def test_pipeline_constructors_use_factory(
             base_url=context.base_url,
         )
 
-    monkeypatch.setattr(base_module, "create_chembl_client", recording_helper)
+    monkeypatch.setattr(base_module.PipelineBase, "_init_chembl_client", recording_helper)
 
     if hasattr(module, "UnifiedAPIClient"):
         monkeypatch.setattr(module, "UnifiedAPIClient", DummyClient)
