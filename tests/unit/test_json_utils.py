"""–¢–µ—Å—Ç—ã –¥–ª—è JSON —É—Ç–∏–ª–∏—Ç."""

import json
import math

import pytest

pytest.importorskip("hypothesis")
from hypothesis import given
from hypothesis import strategies as st
from hypothesis.strategies import SearchStrategy

from bioetl.normalizers.constants import NA_STRINGS
from bioetl.utils.json import canonical_json, normalize_json_list


def _numeric_string_strategy() -> SearchStrategy[str]:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–∏—Å–µ–ª, —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–∏."""

    def _format_float(value: float) -> str:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ general —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å
        # –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ö–≤–æ—Å—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤.
        return format(value, "g")

    integers_as_text = st.integers().map(str)
    finite_floats_as_text = st.floats(allow_nan=False, allow_infinity=False).map(_format_float)
    return st.one_of(integers_as_text, finite_floats_as_text)


def _json_scalar_strategy() -> SearchStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""

    return st.one_of(
        st.none(),
        st.booleans(),
        st.integers(),
        st.floats(allow_nan=True, allow_infinity=False),
        _numeric_string_strategy(),
        st.sampled_from(list(NA_STRINGS)),
        st.text(min_size=0, max_size=10),
    )


def _json_nested_strategy() -> SearchStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä."""

    key_strategy = st.text(min_size=0, max_size=10)
    return st.recursive(
        _json_scalar_strategy(),
        lambda children: st.one_of(
            st.lists(children, max_size=4),
            st.dictionaries(key_strategy, children, max_size=4),
        ),
        max_leaves=10,
    )


def _json_records_strategy() -> SearchStrategy:
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ö–æ–¥–æ–≤ –¥–ª—è normalize_json_list."""

    record_strategy = st.dictionaries(
        st.text(min_size=0, max_size=10),
        _json_nested_strategy(),
        max_size=5,
    )
    records_strategy = st.lists(record_strategy, max_size=5)

    return st.one_of(
        st.sampled_from([None, "", " \t\n", math.nan, "NA", "n/a"]),
        record_strategy,
        records_strategy,
        record_strategy.map(json.dumps),
        records_strategy.map(json.dumps),
    )


def _default_sort_key(item: dict) -> tuple[str, str]:
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∫–ª—é—á —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ normalize_json_list."""

    primary = (
        item.get("name")
        or item.get("type")
        or item.get("property_name")
        or ""
    )
    return (
        str(primary).lower(),
        json.dumps(item, ensure_ascii=False, sort_keys=True),
    )


class TestCanonicalJson:
    """–¢–µ—Å—Ç—ã –¥–ª—è canonical_json."""

    def test_basic_functionality(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        data = {"b": 2, "a": 1, "c": 3}
        result = canonical_json(data)
        assert result is not None
        parsed = json.loads(result)
        assert parsed["a"] == 1
        assert parsed["b"] == 2
        assert parsed["c"] == 3

    def test_nested_structures(self):
        """–¢–µ—Å—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä."""
        data = {
            "nested": {"z": 3, "x": 1, "y": 2},
            "list": [3, 1, 2],
            "mixed": {"a": [2, 1], "b": {"c": 3, "a": 1}}
        }
        result = canonical_json(data)
        assert result is not None
        parsed = json.loads(result)
        assert parsed["nested"]["x"] == 1
        assert parsed["list"] == [3, 1, 2]

    def test_sorting(self):
        """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–ª—é—á–µ–π."""
        data = {"c": 3, "a": 1, "b": 2}
        result = canonical_json(data)
        assert result is not None
        # –ö–ª—é—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã
        parsed = json.loads(result)
        keys = list(parsed.keys())
        assert keys == ["a", "b", "c"]

    def test_sort_keys_false(self):
        """–¢–µ—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∫–ª—é—á–µ–π."""
        data = {"c": 3, "a": 1, "b": 2}
        result = canonical_json(data, sort_keys=False)
        assert result == '{"c": 3, "a": 1, "b": 2}'

    def test_ensure_ascii_false(self):
        """–¢–µ—Å—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º ensure_ascii."""
        data = {"—Ä—É—Å—Å–∫–∏–π": "—Ç–µ–∫—Å—Ç", "emoji": "üöÄ"}
        result = canonical_json(data, ensure_ascii=False)
        assert "—Ä—É—Å—Å–∫–∏–π" in result
        assert "üöÄ" in result

    def test_invalid_values(self):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
        # –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ JSON
        def test_func():
            pass

        class TestClass:
            pass

        assert canonical_json(test_func) is None
        assert canonical_json(TestClass()) is None

    def test_deterministic_output(self):
        """–¢–µ—Å—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞."""
        data = {"b": 2, "a": 1, "c": 3}
        result1 = canonical_json(data)
        result2 = canonical_json(data)
        assert result1 == result2


class TestNormalizeJsonList:
    """–¢–µ—Å—Ç—ã –¥–ª—è normalize_json_list."""

    def test_basic_normalization(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏."""
        data = [{"name": "test", "value": "42"}]
        canonical, records = normalize_json_list(data)

        assert canonical is not None
        assert len(records) == 1
        assert records[0]["name"] == "test"
        assert records[0]["value"] == 42

    def test_multiple_records(self):
        """–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."""
        data = [
            {"name": "test1", "value": "42"},
            {"name": "test2", "value": "24"}
        ]
        canonical, records = normalize_json_list(data)

        assert canonical is not None
        assert len(records) == 2
        assert records[0]["name"] == "test1"
        assert records[1]["name"] == "test2"

    def test_string_to_number_conversion(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ —á–∏—Å–ª–∞."""
        data = [{"name": "test", "value": "42", "float_val": "3.14", "invalid": "abc"}]
        canonical, records = normalize_json_list(data)

        assert canonical is not None
        assert len(records) == 1
        # –°—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        assert records[0]["name"] == "test"
        assert records[0]["value"] == 42  # –ß–∏—Å–ª–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å—Ç–∞—Ç—å —á–∏—Å–ª–æ–º
        assert records[0]["float_val"] == 3.14
        assert records[0]["invalid"] == "abc"  # –ù–µ—á–∏—Å–ª–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π

    def test_none_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ None –∑–Ω–∞—á–µ–Ω–∏–π."""
        data = [{"name": None, "value": None, "other": None}]
        canonical, records = normalize_json_list(data)

        assert canonical is not None
        assert len(records) == 1
        assert records[0]["name"] is None
        assert records[0]["value"] is None
        assert records[0]["other"] is None

    def test_float_nan_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ NaN –∑–Ω–∞—á–µ–Ω–∏–π."""
        import math
        data = [{"value": math.nan, "normal": 42}]
        canonical, records = normalize_json_list(data)

        assert len(records) == 1
        assert records[0]["value"] is None
        assert records[0]["normal"] == 42

    def test_sorting(self):
        """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–ø–∏—Å–µ–π."""
        data = [
            {"value": 3, "name": "c"},
            {"value": 1, "name": "a"},
            {"value": 2, "name": "b"}
        ]

        canonical, records = normalize_json_list(data)
        assert len(records) == 3
        # –ó–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ name
        assert records[0]["name"] == "a"
        assert records[1]["name"] == "b"
        assert records[2]["name"] == "c"

    def test_custom_sorting(self):
        """–¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
        data = [
            {"value": 3, "name": "c"},
            {"value": 1, "name": "a"},
            {"value": 2, "name": "b"}
        ]

        def sort_by_value(record):
            return record.get("value", 0)

        canonical, records = normalize_json_list(data, sort_fn=sort_by_value)
        assert len(records) == 3
        # –ó–∞–ø–∏—Å–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ value
        assert records[0]["value"] == 1
        assert records[1]["value"] == 2
        assert records[2]["value"] == 3

    def test_empty_string_keys(self):
        """–¢–µ—Å—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–ª—é—á–µ–π."""
        data = [{"": None, "name": "test"}]
        canonical, records = normalize_json_list(data)

        assert canonical is not None
        assert len(records) == 2
        assert records[0][""] is None  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è None
        assert records[1]["name"] == "test"

    def test_deterministic_output(self):
        """–¢–µ—Å—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞."""
        data = [{"b": 2, "a": 1}, {"d": 4, "c": 3}]

        canonical1, records1 = normalize_json_list(data)
        canonical2, records2 = normalize_json_list(data)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º–∏
        assert canonical1 == canonical2
        assert records1 == records2

        # –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
        parsed1 = json.loads(canonical1)
        parsed2 = json.loads(canonical2)
        assert parsed1 == parsed2
    @pytest.mark.parametrize("raw", [None, "", "   ", "NA", " n/a ", math.nan])
    def test_na_inputs_return_empty_payload(self, raw):
        """NA inputs should short-circuit to empty canonical payload."""

        canonical, records = normalize_json_list(raw)

        assert canonical is None
        assert records == []

    @given(raw=_json_records_strategy())
    def test_normalize_invariants(self, raw):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º –∏ –∫–∞–Ω–æ–Ω–∏—á–Ω–æ—Å—Ç—å normalize_json_list."""

        first_canonical, first_records = normalize_json_list(raw)
        second_canonical, second_records = normalize_json_list(raw)

        # –î–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º: –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert first_canonical == second_canonical
        assert first_records == second_records

        if first_canonical is None:
            assert first_records == []
            return

        # –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        parsed = json.loads(first_canonical)
        assert parsed == first_records

        # –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
        for record in first_records:
            assert list(record.keys()) == sorted(record.keys())

        # –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–µ–π –ø–æ –∫–ª—é—á—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        expected = sorted(first_records, key=_default_sort_key)
        assert first_records == expected

