#!/usr/bin/env python3
"""–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞."""

import pandas as pd
from library.etl.load import _normalize_dataframe
from library.config import DeterminismSettings

def test_case_preservation():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ –≤ SMILES –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö."""
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
    df = pd.DataFrame({
        'smiles': ['CCO', 'CCN', 'c1ccccc1'],  # SMILES —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
        'target': ['ProteinA', 'ProteinB', 'EnzymeC'],  # –ù–∞–∑–≤–∞–Ω–∏—è –±–µ–ª–∫–æ–≤
        'compound_id': ['CHEMBL1', 'CHEMBL2', 'CHEMBL3'],  # ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        'activity_unit': ['nM', 'uM', 'pM'],  # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        'source': ['ChEMBL', 'PubChem', 'BindingDB']  # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    })
    
    print("–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(df)
    print()
    
    # –¢–µ—Å—Ç 1: –ë–µ–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    print("–¢–µ—Å—Ç 1: –ë–µ–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É")
    determinism_empty = DeterminismSettings(lowercase_columns=[])
    result_empty = _normalize_dataframe(df, determinism_empty)
    print("SMILES:", result_empty['smiles'].tolist())
    print("Target:", result_empty['target'].tolist())
    print("Compound ID:", result_empty['compound_id'].tolist())
    print("Activity Unit:", result_empty['activity_unit'].tolist())
    print("Source:", result_empty['source'].tolist())
    print()
    
    # –¢–µ—Å—Ç 2: –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è source
    print("–¢–µ—Å—Ç 2: –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É (—Ç–æ–ª—å–∫–æ source)")
    determinism_selective = DeterminismSettings(lowercase_columns=['source'])
    result_selective = _normalize_dataframe(df, determinism_selective)
    print("SMILES:", result_selective['smiles'].tolist())
    print("Target:", result_selective['target'].tolist())
    print("Compound ID:", result_selective['compound_id'].tolist())
    print("Activity Unit:", result_selective['activity_unit'].tolist())
    print("Source:", result_selective['source'].tolist())
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    print("–ü—Ä–æ–≤–µ—Ä–∫–∏:")
    
    # –í –æ–±–æ–∏—Ö —Å–ª—É—á–∞—è—Ö SMILES –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä
    assert result_empty['smiles'].tolist() == ['CCO', 'CCN', 'c1ccccc1'], f"SMILES –≤ —Ç–µ—Å—Ç–µ 1: {result_empty['smiles'].tolist()}"
    assert result_selective['smiles'].tolist() == ['CCO', 'CCN', 'c1ccccc1'], f"SMILES –≤ —Ç–µ—Å—Ç–µ 2: {result_selective['smiles'].tolist()}"
    print("‚úì SMILES —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä –≤ –æ–±–æ–∏—Ö —Ç–µ—Å—Ç–∞—Ö")
    
    # Target –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä –≤ –æ–±–æ–∏—Ö —Å–ª—É—á–∞—è—Ö
    assert result_empty['target'].tolist() == ['ProteinA', 'ProteinB', 'EnzymeC'], f"Target –≤ —Ç–µ—Å—Ç–µ 1: {result_empty['target'].tolist()}"
    assert result_selective['target'].tolist() == ['ProteinA', 'ProteinB', 'EnzymeC'], f"Target –≤ —Ç–µ—Å—Ç–µ 2: {result_selective['target'].tolist()}"
    print("‚úì Target —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä –≤ –æ–±–æ–∏—Ö —Ç–µ—Å—Ç–∞—Ö")
    
    # Source –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä –≤ —Ç–µ—Å—Ç–µ 1, –Ω–æ –±—ã—Ç—å –ø—Ä–∏–≤–µ–¥–µ–Ω –∫ –Ω–∏–∂–Ω–µ–º—É –≤ —Ç–µ—Å—Ç–µ 2
    assert result_empty['source'].tolist() == ['ChEMBL', 'PubChem', 'BindingDB'], f"Source –≤ —Ç–µ—Å—Ç–µ 1: {result_empty['source'].tolist()}"
    assert result_selective['source'].tolist() == ['chembl', 'pubchem', 'bindingdb'], f"Source –≤ —Ç–µ—Å—Ç–µ 2: {result_selective['source'].tolist()}"
    print("‚úì Source –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –æ–±–æ–∏—Ö —Ç–µ—Å—Ç–∞—Ö")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

if __name__ == "__main__":
    test_case_preservation()
