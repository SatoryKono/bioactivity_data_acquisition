#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ merge —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
"""

import pandas as pd
import numpy as np
from src.library.testitem.pipeline import TestitemPipeline

def test_merge_robust():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ merge —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö."""
    
    # –°–æ–∑–¥–∞–µ–º mock config
    from src.library.testitem.config import TestitemConfig
    
    class MockConfig(TestitemConfig):
        def __init__(self):
            super().__init__()
            self.sources = {}
    
    pipeline = TestitemPipeline(MockConfig())
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    base_data = pd.DataFrame({
        "molecule_chembl_id": ["CHEMBL123", "CHEMBL456"],
        "canonical_smiles": ["CCO", "CCN"],
        "chirality": [1, 0],
        "mw_freebase": [46.07, 45.08]
    })
    
    chembl_data = pd.DataFrame({
        "molecule_chembl_id": ["CHEMBL123", "CHEMBL456"],
        "molregno": [12345, 67890],
        "pref_name": ["Test Drug 1", "Test Drug 2"],
        "canonical_smiles": ["CCO", "CCN"],
        "chirality": [1, 0],
        "mw_freebase": [46.07, 45.08],
        "parent_chembl_id": ["CHEMBL123", "CHEMBL456"],
        "alogp": [0.31, 0.17],
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        "empty_array": [np.array([]), np.array([])],
        "empty_string": ["", ""],
        "none_value": [None, None],
        "empty_list": [[], []]
    })
    
    # –í—ã–∑—ã–≤–∞–µ–º merge
    merged = pipeline._merge_chembl_data(base_data, chembl_data)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
    duplicate_columns = [col for col in merged.columns if '_x' in col or '_y' in col]
    assert len(duplicate_columns) == 0, f"–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {duplicate_columns}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    expected_columns = [
        "molecule_chembl_id", "canonical_smiles", "chirality", "mw_freebase",
        "molregno", "pref_name", "parent_chembl_id", "alogp"
    ]
    
    for col in expected_columns:
        assert col in merged.columns, f"–ö–æ–ª–æ–Ω–∫–∞ {col} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ merge"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã
    assert len(merged) == 2
    assert merged["molregno"].tolist() == [12345, 67890]
    assert merged["pref_name"].tolist() == ["Test Drug 1", "Test Drug 2"]
    assert merged["parent_chembl_id"].tolist() == ["CHEMBL123", "CHEMBL456"]
    assert merged["alogp"].tolist() == [0.31, 0.17]
    
    print("‚úÖ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ merge —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    print(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {list(merged.columns)}")

def test_is_valid_value():
    """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ _is_valid_value."""
    
    from src.library.testitem.config import TestitemConfig
    
    class MockConfig(TestitemConfig):
        def __init__(self):
            super().__init__()
            self.sources = {}
    
    pipeline = TestitemPipeline(MockConfig())
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    assert pipeline._is_valid_value("valid_string")
    assert pipeline._is_valid_value(123)
    assert pipeline._is_valid_value(0.5)
    assert pipeline._is_valid_value(True)
    assert pipeline._is_valid_value([1, 2, 3])
    assert pipeline._is_valid_value(np.array([1, 2, 3]))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    assert not pipeline._is_valid_value(None)
    assert not pipeline._is_valid_value("")
    assert not pipeline._is_valid_value("   ")
    assert not pipeline._is_valid_value([])
    assert not pipeline._is_valid_value(np.array([]))
    assert not pipeline._is_valid_value(pd.NA)
    
    print("‚úÖ –¢–µ—Å—Ç –º–µ—Ç–æ–¥–∞ _is_valid_value –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ merge...")
    
    try:
        test_merge_robust()
        test_is_valid_value()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        raise
