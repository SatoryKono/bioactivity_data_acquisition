#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞ Semantic Scholar.

Semantic Scholar –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API –∫–ª—é—á–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤.
–ë–µ–∑ –∫–ª—é—á–∞: 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 5 –º–∏–Ω—É—Ç
–° –∫–ª—é—á–æ–º: 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ 5 –º–∏–Ω—É—Ç (–Ω–æ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –∫–ª—é—á–∞:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://www.semanticscholar.org/product/api#api-key-form
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–ø—Ä–æ—Å–∞
3. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –ø–æ email
4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è SEMANTIC_SCHOLAR_API_KEY

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞.
"""

import os
import sys
from pathlib import Path

import requests

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
from library.logging_setup import get_logger

logger = get_logger(__name__)


def check_api_key_status(api_key: str | None = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞ Semantic Scholar."""
    
    if not api_key:
        api_key = os.environ.get('SEMANTIC_SCHOLAR_API_KEY')
    
    if not api_key:
        logger.info("‚ùå API –∫–ª—é—á Semantic Scholar –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è SEMANTIC_SCHOLAR_API_KEY")
        return False
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
    headers = {
        'x-api-key': api_key,
        'User-Agent': 'bioactivity-data-acquisition/0.1.0'
    }
    
    try:
        response = requests.get(
            'https://api.semanticscholar.org/graph/v1/paper/PMID:7154002',
            headers=headers,
            params={'fields': 'title'},
            timeout=30
        )
        
        if response.status_code == 200:
            logger.info("‚úÖ API –∫–ª—é—á Semantic Scholar —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            logger.info(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ rate limiting
            rate_limit = response.headers.get('X-RateLimit-Limit')
            rate_remaining = response.headers.get('X-RateLimit-Remaining')
            
            if rate_limit:
                logger.info(f"–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {rate_limit}")
            if rate_remaining:
                logger.info(f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {rate_remaining}")
                
            return True
            
        elif response.status_code == 401:
            logger.info("‚ùå API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–µ–Ω")
            return False
            
        elif response.status_code == 429:
            logger.info("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
            retry_after = response.headers.get('Retry-After')
            if retry_after:
                logger.info(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫—É–Ω–¥")
            return False
            
        else:
            logger.info(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            logger.info(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ Semantic Scholar")
    logger.info("=" * 50)
    
    api_key = os.environ.get('SEMANTIC_SCHOLAR_API_KEY')
    
    if api_key:
        logger.info(f"–ù–∞–π–¥–µ–Ω API –∫–ª—é—á: {api_key[:10]}...")
    else:
        logger.info("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    logger.info("\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API –∫–ª—é—á–∞:")
    logger.info("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://www.semanticscholar.org/product/api#api-key-form")
    logger.info("2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –∑–∞–ø—Ä–æ—Å–∞")
    logger.info("3. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –ø–æ email")
    logger.info("4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    logger.info("   export SEMANTIC_SCHOLAR_API_KEY=your_key_here")
    logger.info("   # –∏–ª–∏ –≤ Windows:")
    logger.info("   set SEMANTIC_SCHOLAR_API_KEY=your_key_here")
    
    if api_key:
        logger.info("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á...")
        if check_api_key_status(api_key):
            logger.info("\nüéâ API –∫–ª—é—á –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            logger.info("–û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –¥–æ–±–∞–≤–∏–≤ –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏:")
            logger.info("semantic_scholar:")
            logger.info("  http:")
            logger.info("    headers:")
            logger.info("      x-api-key: '{SEMANTIC_SCHOLAR_API_KEY}'")
        else:
            logger.info("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º")
            sys.exit(1)
    else:
        logger.info("\nüí° –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É")
        sys.exit(0)


if __name__ == "__main__":
    main()
