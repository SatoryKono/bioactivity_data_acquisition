#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Pull Request –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è PR —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/create_cleanup_pr.py [--dry-run] [--branch BRANCH_NAME]
"""

import argparse
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import Any


class PRCreator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Pull Request –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏."""
    
    def __init__(self, dry_run: bool = False):
        self.dry_run = dry_run
        self.project_root = Path(__file__).parent.parent
        self.cleanup_report_path = self.project_root / "CLEANUP_REPORT.md"
    
    def log(self, message: str, level: str = "INFO") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        prefix = f"[{timestamp}] {level}:"
        print(f"{prefix} {message}")
    
    def run_command(self, command: list, cwd: Path | None = None) -> tuple[int, str, str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        if cwd is None:
            cwd = self.project_root
        
        cmd_str = " ".join(command)
        self.log(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {cmd_str}")
        
        if self.dry_run:
            self.log(f"[DRY RUN] –ö–æ–º–∞–Ω–¥–∞: {cmd_str}")
            return 0, "", ""
        
        try:
            result = subprocess.run(  # noqa: S603
                command,
                cwd=cwd,
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='replace'
            )
            return result.returncode, result.stdout, result.stderr
        except Exception as e:
            return 1, "", str(e)
    
    def check_git_status(self) -> dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏
        returncode, stdout, stderr = self.run_command(["git", "branch", "--show-current"])
        current_branch = stdout.strip() if returncode == 0 else "unknown"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        returncode, stdout, stderr = self.run_command(["git", "status", "--porcelain"])
        has_changes = bool(stdout.strip())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤
        returncode, stdout, stderr = self.run_command(["git", "log", "--oneline", "-10"])
        recent_commits = stdout.strip().split('\n') if returncode == 0 else []
        
        return {
            "current_branch": current_branch,
            "has_changes": has_changes,
            "recent_commits": recent_commits,
            "status_output": stdout
        }
    
    def ensure_clean_working_directory(self) -> bool:
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è."""
        git_status = self.check_git_status()
        
        if git_status["has_changes"]:
            self.log("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:", "WARNING")
            print(git_status["status_output"])
            
            response = input("\n–•–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è? (y/N): ").strip().lower()
            if response in ['y', 'yes', '–¥–∞']:
                return self.commit_changes()
            else:
                self.log("‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å PR —Å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏", "ERROR")
                return False
        
        return True
    
    def commit_changes(self) -> bool:
        """–ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è."""
        self.log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–Ω–¥–µ–∫—Å...")
        returncode, stdout, stderr = self.run_command(["git", "add", "."])
        if returncode != 0:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {stderr}", "ERROR")
            return False
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–∞
        commit_message = f"Stage 11: Final validation and cleanup completion\n\n- Automated final validation checks\n- Repository health verification\n- Ready for PR creation\n\nTimestamp: {datetime.now().isoformat()}"
        
        self.log("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞...")
        returncode, stdout, stderr = self.run_command([
            "git", "commit", "-m", commit_message
        ])
        
        if returncode != 0:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞: {stderr}", "ERROR")
            return False
        
        self.log("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã")
        return True
    
    def push_branch(self, branch_name: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ç–∫—É –≤ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π."""
        self.log(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—Ç–∫–∏ {branch_name} –≤ origin...")
        
        returncode, stdout, stderr = self.run_command([
            "git", "push", "-u", "origin", branch_name
        ])
        
        if returncode != 0:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—Ç–∫–∏: {stderr}", "ERROR")
            return False
        
        self.log("‚úÖ –í–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return True
    
    def generate_pr_description(self) -> str:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è Pull Request."""
        # –ß—Ç–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –æ–± –æ—á–∏—Å—Ç–∫–µ
        cleanup_summary = ""
        if self.cleanup_report_path.exists():
            content = self.cleanup_report_path.read_text(encoding='utf-8')
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            lines = content.split('\n')
            summary_lines = []
            in_summary = False
            
            for line in lines:
                if "## –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" in line:
                    in_summary = True
                    continue
                elif in_summary and line.startswith('##'):
                    break
                elif in_summary and line.strip():
                    summary_lines.append(line)
            
            cleanup_summary = '\n'.join(summary_lines[:10])  # –ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ —Å–≤–æ–¥–∫–∏
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è PR
        pr_description = f"""## üßπ Stage 11: Final Validation and Cleanup Completion

### –û–±–∑–æ—Ä
–≠—Ç–æ—Ç PR –∑–∞–≤–µ—Ä—à–∞–µ—Ç Stage 11 –ø–ª–∞–Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.

### –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã

#### ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
- [x] –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ (`make test`)
- [x] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ (`make lint`)
- [x] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (`make type-check`)
- [x] Pre-commit —Ö—É–∫–∏ (`pre-commit run --all-files`)
- [x] –°–±–æ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (`mkdocs build --strict`)

#### ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
- [x] –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
- [x] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
- [x] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–∏—Å—Ç–æ—Ç—ã —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
- [x] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏

#### ‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–Ω
- [x] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
- [x] –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ —Å–ª–∏—è–Ω–∏—é
- [x] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞

### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏

{cleanup_summary if cleanup_summary else "–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ CLEANUP_REPORT.md"}

### –°–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
- [CLEANUP_REPORT.md](CLEANUP_REPORT.md) - –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ
- [Stage 11 Plan](.cursor/plans/) - –ü–ª–∞–Ω —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏

### –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è —Ä–µ–≤—å—é–µ—Ä–∞
- [ ] –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
- [ ] –ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞
- [ ] –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
- [ ] Pre-commit —Ö—É–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- [ ] –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
–ü–æ—Å–ª–µ —Å–ª–∏—è–Ω–∏—è —ç—Ç–æ–≥–æ PR:
1. –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
2. –í—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–Ω—ã
3. CI/CD –ø–∞–π–ø–ª–∞–π–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

---
*–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""
        
        return pr_description
    
    def create_pr(self, branch_name: str, title: str, description: str) -> bool:
        """–°–æ–∑–¥–∞—Ç—å Pull Request —á–µ—Ä–µ–∑ GitHub CLI."""
        self.log("–°–æ–∑–¥–∞–Ω–∏–µ Pull Request...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è GitHub CLI
        returncode, stdout, stderr = self.run_command(["gh", "--version"])
        if returncode != 0:
            self.log("‚ùå GitHub CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ gh –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PR", "ERROR")
            self.log("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Å–æ–∑–¥–∞–π—Ç–µ PR –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å GitHub", "INFO")
            return False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ PR
        pr_command = [
            "gh", "pr", "create",
            "--title", title,
            "--body", description,
            "--head", branch_name,
            "--base", "main"
        ]
        
        returncode, stdout, stderr = self.run_command(pr_command)
        
        if returncode != 0:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PR: {stderr}", "ERROR")
            return False
        
        self.log("‚úÖ Pull Request —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        if stdout:
            print(f"PR URL: {stdout.strip()}")
        
        return True
    
    def run_cleanup_pr_workflow(self, branch_name: str | None = None) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π workflow —Å–æ–∑–¥–∞–Ω–∏—è PR –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏."""
        self.log("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è PR –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git
        git_status = self.check_git_status()
        current_branch = branch_name or git_status["current_branch"]
        
        if current_branch == "main" or current_branch == "master":
            self.log("‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å PR –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–∏", "ERROR")
            self.log("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ feature –≤–µ—Ç–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é", "INFO")
            return False
        
        self.log(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {current_branch}")
        
        # 2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è
        if not self.ensure_clean_working_directory():
            return False
        
        # 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Ç–∫—É
        if not self.push_branch(current_branch):
            return False
        
        # 4. –°–æ–∑–¥–∞—Ç—å PR
        pr_title = "Stage 11: Final validation and cleanup completion"
        pr_description = self.generate_pr_description()
        
        if not self.create_pr(current_branch, pr_title, pr_description):
            return False
        
        self.log("üéâ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è PR –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!", "SUCCESS")
        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description="–°–æ–∑–¥–∞–Ω–∏–µ Pull Request –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python scripts/create_cleanup_pr.py
  python scripts/create_cleanup_pr.py --dry-run
  python scripts/create_cleanup_pr.py --branch feature/cleanup-validation
        """
    )
    
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"
    )
    
    parser.add_argument(
        "--branch",
        type=str,
        help="–ò–º—è –≤–µ—Ç–∫–∏ –¥–ª—è PR (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞)"
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ PR creator –∏ –∑–∞–ø—É—Å–∫ workflow
    pr_creator = PRCreator(dry_run=args.dry_run)
    
    try:
        success = pr_creator.run_cleanup_pr_workflow(args.branch)
        
        if success:
            print("\n" + "="*60)
            print("üéâ PR –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
            print("="*60)
            print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–µ–≤—å—é –∏ —Å–ª–∏—è–Ω–∏—é")
            print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π PR –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ GitHub")
            sys.exit(0)
        else:
            print("\n" + "="*60)
            print("‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø PR!")
            print("="*60)
            print("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
