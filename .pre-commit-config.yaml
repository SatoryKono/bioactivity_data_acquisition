repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-added-large-files
        args: ["--maxkb=500"]
        fail_fast: true
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: check-yaml
      - id: check-merge-conflict
      - id: check-case-conflict

  - repo: local
    hooks:
      - id: block-logs-reports
        name: Block committing logs and reports artifacts
        entry: python -c "import sys, os, re; ALLOWED_PATTERNS = [r'logs/README\.md$', r'reports/README\.md$', r'logs/\.gitkeep$', r'reports/\.gitkeep$', r'logs/\.gitignore$', r'reports/\.gitignore$', r'reports/config_audit\.csv$', r'tests/test_outputs/\.gitkeep$']; def is_allowed_file(filepath): return any(re.match(pattern, filepath) for pattern in ALLOWED_PATTERNS); blocked_files = [filepath for filepath in sys.argv[1:] if (filepath.startswith('logs/') or filepath.startswith('reports/') or filepath.startswith('tests/test_outputs/')) and not is_allowed_file(filepath)]; print('‚ùå BLOCKED: Attempting to commit files in logs/, reports/, or tests/test_outputs/ directories:') if blocked_files else print('‚úÖ No forbidden files in logs/ or reports/ directories'); [print(f'   - {filepath}') for filepath in blocked_files]; sys.exit(1) if blocked_files else None"
        language: system
        files: ^(logs/|reports/|tests/test_outputs/).*
        pass_filenames: true
        always_run: false
      - id: no-print-statements
        name: No print statements in library code
        entry: python -c "import sys, re; content = open(sys.argv[1], 'r', encoding='utf-8').read(); print_matches = re.findall(r'print\\s*\\(', content); exit(1) if print_matches and 'src/library/' in sys.argv[1] and 'typer.echo' not in content else exit(0)"
        language: system
        files: ^src/library/.*\.py$
        exclude: ^src/library/cli/.*\.py$  # Allow typer.echo in CLI
        pass_filenames: true
        always_run: false
      - id: check-secrets
        name: Check for potential secrets and sensitive data
        entry: python -c "import sys, re; SECRET_PATTERNS = [(r'password\s*=\s*[\"\'][^\"\']+[\"\']', 'Hardcoded password'), (r'api_key\s*=\s*[\"\'][^\"\']+[\"\']', 'Hardcoded API key'), (r'secret\s*=\s*[\"\'][^\"\']+[\"\']', 'Hardcoded secret'), (r'token\s*=\s*[\"\'][^\"\']+[\"\']', 'Hardcoded token'), (r'[A-Za-z0-9+/]{40,}={0,2}', 'Potential base64 encoded secret')]; def check_file(filepath): return [(i, line.strip(), description) for i, line in enumerate(open(filepath, 'r', encoding='utf-8', errors='ignore').read().split('\n'), 1) for pattern, description in SECRET_PATTERNS if re.search(pattern, line, re.IGNORECASE) and not (line.strip().startswith('#') or 'example' in line.lower() or 'placeholder' in line.lower())] if filepath.endswith(('.py', '.yaml', '.yml', '.json', '.env', '.ini', '.cfg')) else []; all_issues = [(filepath, check_file(filepath)) for filepath in sys.argv[1:] if check_file(filepath)]; print('‚ö†Ô∏è  POTENTIAL SECRETS DETECTED:') if all_issues else print('‚úÖ No potential secrets detected'); [print(f'\\nüìÅ {filepath}:') or [print(f'   Line {line_num}: {description}\\n   Content: {line[:100]}...' if len(line) > 100 else f'   Line {line_num}: {description}\\n   Content: {line}') for line_num, line, description in issues] for filepath, issues in all_issues]; sys.exit(1) if all_issues else None"
        language: system
        files: ^(src/|configs/|scripts/).*\.(py|yaml|yml|json|env|ini|cfg)$
        pass_filenames: true
        always_run: false
      
      # Vulture - dead code detection
      - id: vulture
        name: Detect dead code with Vulture
        entry: vulture src tests --min-confidence 80 --exclude=*/__pycache__/*,*/site/*
        language: system
        types: [python]
        pass_filenames: false
        always_run: false
      
      # Deptry - dependency management
      - id: deptry
        name: Check dependency issues with Deptry
        entry: deptry . --ignore DEP002,DEP003
        language: system
        pass_filenames: false
        always_run: false
      
      # jscpd - copy-paste detector
      - id: jscpd
        name: Detect code duplication with jscpd
        entry: npx jscpd --min-tokens 50 --threshold 3 --ignore "**/node_modules/**,**/.venv/**,**/site/**,**/build/**,**/__pycache__/**,**/data/**" --pattern "**/*.{py,yaml,yml,md}" --reporters console --exitOnError
        language: node
        pass_filenames: false
        always_run: false
      
      # Check package.json exists
      - id: check-package-json
        name: Check package.json exists
        entry: bash -c 'test -f package.json || (echo "package.json missing!" && exit 1)'
        language: system
        pass_filenames: false
        always_run: true
      
      # Root cleanliness check
      - id: check-root-files
        name: Check for unwanted files in root
        entry: python -c "import sys, os; from pathlib import Path; ALLOWED_ROOT_FILES = {'README.md', 'Makefile', 'pyproject.toml', 'mkdocs.yml', 'Dockerfile', 'docker-compose.yml', 'pyrightconfig.json', '.pre-commit-config.yaml', '.gitignore', '.markdownlint.json', '.python-version', 'LICENSE', 'CHANGELOG.md', '.bandit', '.banditignore', '.coverage', '.dockerignore', '.env.example', '.gitattributes', '.markdown-link-check.json', '.pre-commit-hooks.yaml', '.pymarkdown.json', '.safety_policy.yaml', 'package.json', '.jscpd.json'}; ALLOWED_ROOT_DIRS = {'src', 'tests', 'configs', 'scripts', 'docs', 'data', 'metadata', 'logs', '.git', '.github', '.vscode', '.idea', 'venv', '.venv', 'env', 'node_modules', '__pycache__', 'build', 'dist', 'site', '.pytest_cache', '.mypy_cache', '.ruff_cache', '.cursor'}; violations = [f'Unwanted file: {item.name}' if item.is_file() and item.name not in ALLOWED_ROOT_FILES else f'Unwanted directory: {item.name}' if item.is_dir() and item.name not in ALLOWED_ROOT_DIRS else None for item in Path('.').iterdir() if not (item.name.startswith('.') and item.is_file() and item.name not in ALLOWED_ROOT_FILES)]; violations = [v for v in violations if v]; print('‚ùå ROOT CLEANLINESS VIOLATIONS:') if violations else print('‚úÖ Root directory is clean'); [print(f'   - {v}') for v in violations]; print('\\nüí° Keep root clean! Move files to appropriate directories.') if violations else None; sys.exit(1) if violations else None"
        language: system
        pass_filenames: false
        always_run: true

  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black
        language_version: python3

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.4.4
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-PyYAML, pandera]
        args: [--ignore-missing-imports]

  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        args: [--config, .markdownlint.json]
        files: ^docs/.*\.md$