repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-added-large-files
        args: ["--maxkb=500"]
        fail_fast: true
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: check-yaml
      - id: check-merge-conflict
      - id: check-case-conflict

  - repo: local
    hooks:
      - id: block-logs-reports
        name: Block committing logs and reports artifacts
        entry: python -c "
import sys
import os
import re

# Whitelisted files that are allowed in logs/, reports/, and tests/test_outputs/
ALLOWED_PATTERNS = [
    r'logs/README\.md$',
    r'reports/README\.md$', 
    r'logs/\.gitkeep$',
    r'reports/\.gitkeep$',
    r'logs/\.gitignore$',
    r'reports/\.gitignore$',
    r'reports/config_audit\.csv$',  # Existing config audit file
    r'tests/test_outputs/\.gitkeep$',  # Allow .gitkeep in test outputs
]

def is_allowed_file(filepath):
    '''Check if file is in whitelist'''
    for pattern in ALLOWED_PATTERNS:
        if re.match(pattern, filepath):
            return True
    return False

def main():
    blocked_files = []
    
    for filepath in sys.argv[1:]:
        if (filepath.startswith('logs/') or filepath.startswith('reports/') or filepath.startswith('tests/test_outputs/')) and not is_allowed_file(filepath):
            blocked_files.append(filepath)
    
    if blocked_files:
        print('‚ùå BLOCKED: Attempting to commit files in logs/, reports/, or tests/test_outputs/ directories:')
        for filepath in blocked_files:
            print(f'   - {filepath}')
        print()
        print('üí° These directories are for generated artifacts and should not be committed.')
        print('   Allowed files: README.md, .gitkeep, .gitignore, and whitelisted data files.')
        print('   Use .gitignore to exclude generated files from tracking.')
        sys.exit(1)
    
    print('‚úÖ No forbidden files in logs/ or reports/ directories')

if __name__ == '__main__':
    main()
"
        language: system
        files: ^(logs/|reports/|tests/test_outputs/).*
        pass_filenames: true
        always_run: false
      - id: no-print-statements
        name: No print statements in library code
        entry: python -c "import sys, re; content = open(sys.argv[1], 'r', encoding='utf-8').read(); print_matches = re.findall(r'print\\s*\\(', content); exit(1) if print_matches and 'src/library/' in sys.argv[1] and 'typer.echo' not in content else exit(0)"
        language: system
        files: ^src/library/.*\.py$
        exclude: ^src/library/cli/.*\.py$  # Allow typer.echo in CLI
        pass_filenames: true
        always_run: false
      - id: check-secrets
        name: Check for potential secrets and sensitive data
        entry: python -c "
import sys
import re

# Patterns that might indicate secrets or sensitive data
SECRET_PATTERNS = [
    (r'password\s*=\s*[\"\'][^\"\']+[\"\']', 'Hardcoded password'),
    (r'api_key\s*=\s*[\"\'][^\"\']+[\"\']', 'Hardcoded API key'),
    (r'secret\s*=\s*[\"\'][^\"\']+[\"\']', 'Hardcoded secret'),
    (r'token\s*=\s*[\"\'][^\"\']+[\"\']', 'Hardcoded token'),
    (r'[A-Za-z0-9+/]{40,}={0,2}', 'Potential base64 encoded secret'),
]

def check_file(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
            lines = content.split('\n')
            
        issues = []
        for i, line in enumerate(lines, 1):
            for pattern, description in SECRET_PATTERNS:
                if re.search(pattern, line, re.IGNORECASE):
                    # Skip if it's a comment or example
                    if not (line.strip().startswith('#') or 'example' in line.lower() or 'placeholder' in line.lower()):
                        issues.append((i, line.strip(), description))
        
        return issues
    except Exception as e:
        return [(0, f'Error reading file: {e}', 'File read error')]

def main():
    all_issues = []
    
    for filepath in sys.argv[1:]:
        if filepath.endswith(('.py', '.yaml', '.yml', '.json', '.env', '.ini', '.cfg')):
            issues = check_file(filepath)
            if issues:
                all_issues.append((filepath, issues))
    
    if all_issues:
        print('‚ö†Ô∏è  POTENTIAL SECRETS DETECTED:')
        for filepath, issues in all_issues:
            print(f'\\nüìÅ {filepath}:')
            for line_num, line, description in issues:
                if line_num > 0:
                    print(f'   Line {line_num}: {description}')
                    print(f'   Content: {line[:100]}...' if len(line) > 100 else f'   Content: {line}')
                else:
                    print(f'   {description}')
        
        print('\\nüí° Please review these potential secrets and use environment variables or config files instead.')
        print('   Consider using .env files (not tracked) or secure configuration management.')
        sys.exit(1)
    
    print('‚úÖ No potential secrets detected')

if __name__ == '__main__':
    main()
"
        language: system
        files: ^(src/|configs/|scripts/).*\.(py|yaml|yml|json|env|ini|cfg)$
        pass_filenames: true
        always_run: false
      
      # Vulture - dead code detection
      - id: vulture
        name: Detect dead code with Vulture
        entry: vulture src tests --min-confidence 80 --exclude=*/__pycache__/*,*/site/*
        language: system
        types: [python]
        pass_filenames: false
        always_run: false
      
      # Deptry - dependency management
      - id: deptry
        name: Check dependency issues with Deptry
        entry: deptry . --ignore DEP002,DEP003
        language: system
        pass_filenames: false
        always_run: false
      
      # Check package.json exists
      - id: check-package-json
        name: Check package.json exists
        entry: bash -c 'test -f package.json || (echo "package.json missing!" && exit 1)'
        language: system
        pass_filenames: false
        always_run: true
      
      # Root cleanliness check
      - id: check-root-files
        name: Check for unwanted files in root
        entry: python -c "import sys, os; from pathlib import Path; ALLOWED_ROOT_FILES = {'README.md', 'Makefile', 'pyproject.toml', 'mkdocs.yml', 'Dockerfile', 'docker-compose.yml', 'pyrightconfig.json', '.pre-commit-config.yaml', '.gitignore', '.markdownlint.json', '.python-version', 'LICENSE', 'CHANGELOG.md', '.bandit', '.banditignore', '.coverage', '.dockerignore', '.env.example', '.gitattributes', '.markdown-link-check.json', '.pre-commit-hooks.yaml', '.pymarkdown.json', '.safety_policy.yaml', 'package.json', '.jscpd.json'}; ALLOWED_ROOT_DIRS = {'src', 'tests', 'configs', 'scripts', 'docs', 'data', 'metadata', 'logs', '.git', '.github', '.vscode', '.idea', 'venv', '.venv', 'env', 'node_modules', '__pycache__', 'build', 'dist', 'site', '.pytest_cache', '.mypy_cache', '.ruff_cache', '.cursor'}; violations = [f'Unwanted file: {item.name}' if item.is_file() and item.name not in ALLOWED_ROOT_FILES else f'Unwanted directory: {item.name}' if item.is_dir() and item.name not in ALLOWED_ROOT_DIRS else None for item in Path('.').iterdir() if not (item.name.startswith('.') and item.is_file() and item.name not in ALLOWED_ROOT_FILES)]; violations = [v for v in violations if v]; print('‚ùå ROOT CLEANLINESS VIOLATIONS:') if violations else print('‚úÖ Root directory is clean'); [print(f'   - {v}') for v in violations]; print('\\nüí° Keep root clean! Move files to appropriate directories.') if violations else None; sys.exit(1) if violations else None"
        language: system
        pass_filenames: false
        always_run: true
      - id: check-xml-regex
        name: Check for regex in XML parsing code
        entry: python scripts/check_xml_regex.py
        language: system
        files: ^src/library/clients/(pubmed|base)\.py$
        pass_filenames: true

  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black
        language_version: python3

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.4.4
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-PyYAML, pandera]
        args: [--ignore-missing-imports]

  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.39.0
    hooks:
      - id: markdownlint
        args: [--config, .markdownlint.json]
        files: ^docs/.*\.md$